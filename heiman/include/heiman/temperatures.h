/* Auto-generated by genmsg_cpp for file /home/bee/development/heiman/msg/temperatures.msg */
#ifndef HTPADRIVERS_MESSAGE_TEMPERATURES_H
#define HTPADRIVERS_MESSAGE_TEMPERATURES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace heiman
{
template <class ContainerAllocator>
struct temperatures_ {
  typedef temperatures_<ContainerAllocator> Type;

  temperatures_()
  : temperaturas()
  {
    temperaturas.assign(0);
  }

  temperatures_(const ContainerAllocator& _alloc)
  : temperaturas()
  {
    temperaturas.assign(0);
  }

  typedef boost::array<int16_t, 992>  _temperaturas_type;
  boost::array<int16_t, 992>  temperaturas;


  typedef boost::shared_ptr< ::heiman::temperatures_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::heiman::temperatures_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct temperatures
typedef  ::heiman::temperatures_<std::allocator<void> > temperatures;

typedef boost::shared_ptr< ::heiman::temperatures> temperaturesPtr;
typedef boost::shared_ptr< ::heiman::temperatures const> temperaturesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::heiman::temperatures_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::heiman::temperatures_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace heiman

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::heiman::temperatures_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::heiman::temperatures_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::heiman::temperatures_<ContainerAllocator> > {
  static const char* value() 
  {
    return "622fe085d7b9106a4628c0792d097a2c";
  }

  static const char* value(const  ::heiman::temperatures_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x622fe085d7b9106aULL;
  static const uint64_t static_value2 = 0x4628c0792d097a2cULL;
};

template<class ContainerAllocator>
struct DataType< ::heiman::temperatures_<ContainerAllocator> > {
  static const char* value() 
  {
    return "heiman/temperatures";
  }

  static const char* value(const  ::heiman::temperatures_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::heiman::temperatures_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16[992] temperaturas\n\
\n\
";
  }

  static const char* value(const  ::heiman::temperatures_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::heiman::temperatures_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::heiman::temperatures_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.temperaturas);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct temperatures_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::heiman::temperatures_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::heiman::temperatures_<ContainerAllocator> & v) 
  {
    s << indent << "temperaturas[]" << std::endl;
    for (size_t i = 0; i < v.temperaturas.size(); ++i)
    {
      s << indent << "  temperaturas[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.temperaturas[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // HTPADRIVERS_MESSAGE_TEMPERATURES_H

